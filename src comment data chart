import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { BarChart, Bar, ScatterChart, Scatter, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from "recharts";

interface DataChartsProps {
  data: any[];
}

export const DataCharts = ({ data }: DataChartsProps) => {
  if (data.length === 0) return null;

  // Prepare scatter data - Price vs Area
  const scatterData = data
    .map(row => ({
      area: parseFloat(row.Area || row.area || 0),
      price: parseFloat(row.Price || row.price || 0) * 1200, // Apply INR conversion
    }))
    .filter(d => d.area > 0 && d.price > 0)
    .slice(0, 50);

  // Prepare bar data - Average price by location
  const locationPrices: { [key: string]: number[] } = {};
  data.forEach(row => {
    const location = row.Location || row.location;
    const price = parseFloat(row.Price || row.price || 0);
    if (location && price > 0) {
      if (!locationPrices[location]) locationPrices[location] = [];
      locationPrices[location].push(price * 1200); // Apply INR conversion
    }
  });

  const barData = Object.entries(locationPrices)
    .map(([location, prices]) => ({
      location,
      avgPrice: prices.reduce((a, b) => a + b, 0) / prices.length,
    }))
    .sort((a, b) => b.avgPrice - a.avgPrice)
    .slice(0, 8);

  // Prepare line data - Price trend by year
  const yearPrices: { [key: string]: number[] } = {};
  data.forEach(row => {
    const year = row['Year Built'] || row['year built'] || row.YearBuilt || row.yearBuilt || row.year_built;
    const price = parseFloat(row.Price || row.price || 0);
    if (year && price > 0) {
      const yearNum = parseInt(String(year));
      if (yearNum > 1900 && yearNum <= 2025) {
        if (!yearPrices[yearNum]) yearPrices[yearNum] = [];
        yearPrices[yearNum].push(price * 1200); // Apply INR conversion
      }
    }
  });

  const lineData = Object.entries(yearPrices)
    .map(([year, prices]) => ({
      year: parseInt(year),
      avgPrice: prices.reduce((a, b) => a + b, 0) / prices.length,
    }))
    .sort((a, b) => a.year - b.year)
    .slice(-10);

  const COLORS = ['hsl(var(--chart-1))', 'hsl(var(--chart-2))', 'hsl(var(--chart-3))', 'hsl(var(--chart-4))', 'hsl(var(--chart-5))'];

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <Card className="bg-gradient-card shadow-md">
        <CardHeader>
          <CardTitle className="text-lg font-semibold">Price vs Area</CardTitle>
          <p className="text-sm text-muted-foreground">Correlation between property size and price</p>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={300}>
            <ScatterChart>
              <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
              <XAxis 
                type="number" 
                dataKey="area" 
                name="Area" 
                unit=" sqft"
                tick={{ fill: 'hsl(var(--foreground))' }}
              />
              <YAxis 
                type="number" 
                dataKey="price" 
                name="Price" 
                unit="₹"
                tick={{ fill: 'hsl(var(--foreground))' }}
              />
              <Tooltip 
                cursor={{ strokeDasharray: '3 3' }}
                contentStyle={{
                  backgroundColor: 'hsl(var(--card))',
                  border: '1px solid hsl(var(--border))',
                  borderRadius: '8px',
                }}
              />
              <Scatter data={scatterData} fill="hsl(var(--chart-1))" />
            </ScatterChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>

      <Card className="bg-gradient-card shadow-md">
        <CardHeader>
          <CardTitle className="text-lg font-semibold">Average Price by Location</CardTitle>
          <p className="text-sm text-muted-foreground">Top locations by average property price</p>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={barData}>
              <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
              <XAxis 
                dataKey="location" 
                tick={{ fill: 'hsl(var(--foreground))', fontSize: 12 }}
                angle={-45}
                textAnchor="end"
                height={100}
              />
              <YAxis tick={{ fill: 'hsl(var(--foreground))' }} />
              <Tooltip 
                contentStyle={{
                  backgroundColor: 'hsl(var(--card))',
                  border: '1px solid hsl(var(--border))',
                  borderRadius: '8px',
                }}
                formatter={(value: number) => `₹${value.toLocaleString('en-IN', { maximumFractionDigits: 0 })}`}
              />
              <Bar dataKey="avgPrice" name="Average Price">
                {barData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>

      <Card className="bg-gradient-card shadow-md lg:col-span-2">
        <CardHeader>
          <CardTitle className="text-lg font-semibold">Price Trend Over Years</CardTitle>
          <p className="text-sm text-muted-foreground">Average price by construction year</p>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={lineData}>
              <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
              <XAxis 
                dataKey="year" 
                tick={{ fill: 'hsl(var(--foreground))' }}
              />
              <YAxis tick={{ fill: 'hsl(var(--foreground))' }} />
              <Tooltip 
                contentStyle={{
                  backgroundColor: 'hsl(var(--card))',
                  border: '1px solid hsl(var(--border))',
                  borderRadius: '8px',
                }}
                formatter={(value: number) => `₹${value.toLocaleString('en-IN', { maximumFractionDigits: 0 })}`}
              />
              <Line 
                type="monotone" 
                dataKey="avgPrice" 
                name="Average Price"
                stroke="hsl(var(--chart-2))" 
                strokeWidth={3}
                dot={{ fill: 'hsl(var(--chart-2))', r: 5 }}
                activeDot={{ r: 8 }}
              />
            </LineChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>
    </div>
  );
};
